{"version":3,"sources":["component/TodoApp/TodoApp.js","component/About/About.js","component/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["TodoApp","state","input","items","event","setState","target","name","value","storeitem","preventDefault","trim","alert","push","dltitem","key","allitem","splice","this","className","onSubmit","type","onChange","placeholder","map","itms","onClick","Component","About","style","textAlign","fontSize","Header","to","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAEqBA,G,kNACnBC,MAAQ,CACNC,MAAO,GACPC,MAAO,I,EAGTD,MAAQ,SAACE,GACP,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAItCC,UAAY,SAACL,GACXA,EAAMM,iBAC0B,KAA5B,EAAKT,MAAMC,MAAMS,OACnBC,MAAM,aAEN,EAAKX,MAAME,MAAMU,KAAK,EAAKZ,MAAMC,OACjC,EAAKG,SAAS,CAAEH,MAAO,O,EAI3BY,QAAU,SAACC,GACT,IAAMC,EAAU,EAAKf,MAAME,MAC3Ba,EAAQC,OAAOF,EAAK,GACpB,EAAKV,SAAS,CACZF,MAAOa,K,uDAID,IAAD,OACCd,EAAUgB,KAAKjB,MAAfC,MAER,OACE,yBAAKiB,UAAU,kBACb,0BAAMA,UAAU,SAASC,SAAUF,KAAKT,WACtC,wCACA,2BACEY,KAAK,OACLd,KAAK,QACLC,MAAON,EACPoB,SAAUJ,KAAKhB,MACfqB,YAAY,iBAIhB,yBAAKJ,UAAU,kBACb,4BACGD,KAAKjB,MAAME,MAAMqB,KAAI,SAACC,EAAMV,GAAP,OACpB,wBAAIA,IAAKA,GACNU,EAED,uBACEN,UAAU,mBACVO,QAAS,kBAAM,EAAKZ,QAAQC,iB,GAtDTY,cCAtB,SAASC,IACtB,OACE,6BACE,wBAAIC,MAAO,CAAEC,UAAW,SAAUC,SAAU,SAA5C,mBACA,uBAAGF,MAAO,CAAEC,UAAW,SAAUC,SAAU,SAA3C,wD,iBCFS,SAASC,IACtB,OACE,gCACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,U,WCFS,aACb,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWpC,IACjC,kBAAC,IAAD,CAAOkC,KAAK,SAASE,UAAWR,MCClBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f8fd5c98.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./TodoApp.css\";\r\nexport default class TodoApp extends Component {\r\n  state = {\r\n    input: \"\",\r\n    items: [],\r\n  };\r\n\r\n  input = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  storeitem = (event) => {\r\n    event.preventDefault();\r\n    if (this.state.input.trim() === \"\") {\r\n      alert(\"No input\");\r\n    } else {\r\n      this.state.items.push(this.state.input);\r\n      this.setState({ input: \"\" });\r\n    }\r\n  };\r\n\r\n  dltitem = (key) => {\r\n    const allitem = this.state.items;\r\n    allitem.splice(key, 1);\r\n    this.setState({\r\n      items: allitem,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { input } = this.state;\r\n\r\n    return (\r\n      <div className=\"todo-container\">\r\n        <form className=\"header\" onSubmit={this.storeitem}>\r\n          <h2>ToDo App</h2>\r\n          <input\r\n            type=\"text\"\r\n            name=\"input\"\r\n            value={input}\r\n            onChange={this.input}\r\n            placeholder=\"Enter Items\"\r\n          />\r\n        </form>\r\n\r\n        <div className=\"list-container\">\r\n          <ul>\r\n            {this.state.items.map((itms, key) => (\r\n              <li key={key}>\r\n                {itms}\r\n\r\n                <i\r\n                  className=\"fas fa-trash-alt\"\r\n                  onClick={() => this.dltitem(key)}\r\n                ></i>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function About() {\r\n  return (\r\n    <div>\r\n      <h3 style={{ textAlign: \"center\", fontSize: \"70px\" }}>About Component</h3>\r\n      <p style={{ textAlign: \"center\", fontSize: \"20px\" }}>\r\n        This project was created to know the basic of react\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Header() {\r\n  return (\r\n    <header>\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/about\">About</Link>\r\n    </header>\r\n  );\r\n}\r\n","import React from \"react\";\nimport TodoApp from \"./component/TodoApp/TodoApp\";\nimport About from \"./component/About/About\";\nimport Header from \"./component/Header/Header\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nexport default () => {\n  return (\n    <Router>\n      <Header />\n      <Route path=\"/\" exact component={TodoApp} />\n      <Route path=\"/about\" component={About} />\n    </Router>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}